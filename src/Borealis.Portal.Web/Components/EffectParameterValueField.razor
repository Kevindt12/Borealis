@using Borealis.Domain.Effects

@using Color = System.Drawing.Color

@switch (ParameterType)
{
    case EffectParameterType.Text:

        <MudTextField T="string" Class="@Class" Margin="@Margin" Variant="@Variant" Value="@_text" ValueChanged="OnTextValueChangedAsync"></MudTextField>


        break;
    case EffectParameterType.Number:

        <MudNumericField T="double?" Class="@Class" Margin="@Margin" Label="@Label" Variant="@Variant" Value="@_number" ValueChanged="OnNumberValueChangedAsync"></MudNumericField>

        break;
    case EffectParameterType.Boolean:

        <MudSelect T="bool?" Class="@Class" Margin="@Margin" Label="@Label" Variant="@Variant" Value="@_boolean" ValueChanged="OnBooleanValueChangedAsync">
            <MudSelectItem T="bool?" Value="null"></MudSelectItem>
            <MudSelectItem T="bool?" Value="true">True</MudSelectItem>
            <MudSelectItem T="bool?" Value="false">False</MudSelectItem>

        </MudSelect>

        break;
    case EffectParameterType.Color:
        <MudColorPicker Label="@Label" Text="@_color" Margin="@Margin" TextChanged="OnColorValueChangedAsync" Style="@($"color: {_color};")" Placeholder="@Placeholder" />


        break;
    case EffectParameterType.ColorArray:

        <MudPaper Class="d-flex">


            <MudButton Variant="Variant.Filled"  Color="MudBlazor.Color.Primary" OnClick="@ToggleColorArrayOpenAsync">
                Colors : @_color.Count()
            </MudButton>

            <MudPopover Open="@_isColorArrayOpen" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopRight">
                <MudStack Class="d-flex flex-column pa-1">


                    @for (int i = 0; i < _colors.Count; i++)
                    {
                        <MudStack Class="d-flex pa-1" Row="true">
                            <MudColorPicker Label="@($"Color {i}")" ColorPickerView="ColorPickerView.Spectrum" DisableAlpha="true" Text="@(System.Drawing.ColorTranslator.ToHtml(_colors[i]))" TextChanged="color => _colors[i] = System.Drawing.ColorTranslator.FromHtml(color)" />
                            <MudIconButton Size="Size.Small" Class="pa-1" Icon="@Icons.Filled.Delete" OnClick="() => RemoveColor(i)" />
                        </MudStack>
                    }
                    <MudButton OnClick="@AddColor" Color="MudBlazor.Color.Primary">Add another line</MudButton>
                </MudStack>
            </MudPopover>
        </MudPaper>
        break;

}





@code {



    private string? _text;
    private double? _number;
    private bool? _boolean;
    private string? _color;
    private IList<Color> _colors = new List<Color>();

    private int _indexCounter = 0;

    private bool _isColorArrayOpen;


	[Parameter]
	public Variant Variant { get; set; }

	[Parameter]
	public string Class { get; set; } = String.Empty;

    [Parameter]
    public Margin Margin { get; set; }

	[Parameter]
	public string Label { get; set; } = String.Empty;

	[Parameter]
	public string Placeholder { get; set; } = String.Empty;

	[Parameter]
	public int Denounce { get; set; }


	[Parameter]
	public EffectParameterType ParameterType { get; set; }

	[Parameter]
	public object? Value { get; set; }

	[Parameter]
	public EventCallback<object?> ValueChanged { get; set; }


    protected virtual async Task OnTextValueChangedAsync(String? value)
    {
        _text = value;
        Value = value;
        await ValueChanged.InvokeAsync(value);
    }



    protected virtual async Task OnNumberValueChangedAsync(double? value)
    {
        _number = value;
        Value = value;
        await ValueChanged.InvokeAsync(value);
    }


    protected virtual async Task OnBooleanValueChangedAsync(bool? value)
    {
        _boolean = value;
        Value = value;
        await ValueChanged.InvokeAsync(value);
    }


    protected virtual async Task OnColorValueChangedAsync(string? value)
    {
        _color = value;

        if (String.IsNullOrEmpty(value))
        {
            Value = null;
            await ValueChanged.InvokeAsync(null);
            return;
        }

        Color? color = System.Drawing.ColorTranslator.FromHtml(value);

        Value = color;
        await ValueChanged.InvokeAsync(color);
    }


    protected virtual async Task ToggleColorArrayOpenAsync()
    {
        _isColorArrayOpen = !_isColorArrayOpen;

        // If its now closed.
        if (_isColorArrayOpen == false)
        {
            Value = _colors;
            await ValueChanged.InvokeAsync(_colors);
        }

    }


    protected virtual void AddColor()
    {
        _colors.Add(Color.Black);
    }





    protected virtual void RemoveColor(int index)
    {
        _colors.RemoveAt(index);
        StateHasChanged();
    }


}