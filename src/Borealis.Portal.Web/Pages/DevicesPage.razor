@page "/Devices"

@using MudBlazor
@using Borealis.Domain.Devices
@using System.Net
@using Borealis.Portal.Domain.Animations
@using Borealis.Portal.Domain.Devices
@using Borealis.Portal.Domain.Effects
@using Borealis.Portal.Domain.Exceptions
@using Borealis.Portal.Web.Extensions
@using Microsoft.EntityFrameworkCore


@*
    TODO: Exception throw when adding a new devices. A null reference exception.

*@

@* ReSharper disable InconsistentNaming | This is because i want to threat them as fields. I know this is just a autistic thing.*@
@inject ILogger<DevicesPage> _logger

@inject IDeviceManager _deviceManager
@inject IDeviceFactory _deviceFactory
@inject IDeviceService _deviceService

@inject NavigationManager _NavigationManager
@inject ISnackbar _snackbar
@* ReSharper restore InconsistentNaming *@

<PageTitle>Devices</PageTitle>

@* The action buttons. *@
<MudStack Class="py-4" AlignItems="AlignItems.Start" Justify="Justify.SpaceBetween" Row="true">
    <MudButton Class="pa-2"
               Size="Size.Small"
               Color="Color.Primary"
               Variant="Variant.Filled"
               StartIcon="@Icons.Material.Filled.Add"
               OnClick="OpenCreateDialog">Add</MudButton>
</MudStack>


@* The card for each device *@
<MudGrid Class="pa-2">

    @foreach (Device device in Devices)
    {
        // Checks if the device is connected.
        bool connected = _deviceService.IsDeviceConnected(device);

        @* Each device. *@
        <MudItem md="4">
            <MudCard Elevation="2" Outlined="true" Class="pa-2">
                <MudCardHeader>
                    @* The name and edit button. *@
                    <CardHeaderContent>
                        <MudText Class="pa-2" Align="Align.Center" Typo="Typo.h4"> @device.Name </MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" OnClick="() => OpenEditDialog(device)" />
                    </CardHeaderActions>

                </MudCardHeader>
                <MudCardContent>

                    @* The details. *@
                    <MudText Class="pa-1" Typo="Typo.body2">Details</MudText>
                    <MudStack Row="true" Justify="Justify.SpaceBetween">
                        <MudText Class="pa-1" Typo="Typo.subtitle2">IP Address</MudText>
                        <MudText Class="pa-1" Typo="Typo.subtitle2">@device.EndPoint.ToString()</MudText>
                    </MudStack>

                    <MudStack Row="true" Justify="Justify.SpaceBetween">
                        <MudText Class="pa-1" Typo="Typo.subtitle2">Auto Connect</MudText>
                        <MudText Class="pa-1" Typo="Typo.subtitle2">@(device.AutoConnect ? "Yes" : "No")</MudText>
                        </MudStack>

                        <MudStack Row="true" Justify="Justify.SpaceBetween">
                            <MudText Class="pa-1" Typo="Typo.subtitle2">Connection</MudText>
                            <MudText Class="pa-1" Typo="Typo.subtitle2">@(device.ConnectionType.ToString())</MudText>
                        </MudStack>

                        @*The divider. *@
                        <MudStack Class="pa-2">
                            <MudDivider DividerType="DividerType.Inset" FlexItem="true" />
                        </MudStack>

                        @* For Each ledstrip*@
                    <MudPaper Height="50" Outlined="true" Elevation="2">

                        @if (device.Configuration?.Ledstrips.Any() ?? false)
                        {
                            foreach (Ledstrip ledstrips in device.Configuration.Ledstrips)
                            {
                                <MudStack Row="@true" Justify="@Justify.SpaceBetween">
                                    <MudText Class="pa-2" Typo="@Typo.body1">@ledstrips.Name</MudText>
                                    <MudText Class="pa-2" Typo="@Typo.body1">@ledstrips.Length</MudText>
                                </MudStack>
                            }
                        }
                    </MudPaper>

                </MudCardContent>
                <MudCardActions>
                    
                    @* The connect button and the edit configuration button. *@
                    <MudStack Row="true" Class="pa-2">
                        <MudButton Class="pa-4"
                               Variant="Variant.Filled"
                               Color="@(connected ? Color.Success : Color.Primary)"
                               OnClick="@(() => connected ? DisconnectFromDeviceAsync(device) : ConnectToDeviceAsync(device))">
                            @(connected ? "Disconnect" : "Connect")
                        </MudButton>
                        <MudButton Class="pa-4" OnClick="@(() => _NavigationManager.NavigateTo($"/Devices/Edit/{device.Id}"))" Variant="Variant.Outlined" Color="Color.Primary">Edit Configuration</MudButton>
                    </MudStack>
                </MudCardActions>
            </MudCard>


        </MudItem>



    }
</MudGrid>



@* ---------- Select Effect Dialog ----------- *@



<MudDialog @bind-IsVisible="_selectEffectDialogVisible" Options="GetDialogOptions()">

    <TitleContent>
        <MudText Class="pa-2" Typo="Typo.h5">
            <MudIcon Size="Size.Medium" Icon="@(_editMode ? Icons.Filled.Edit : Icons.Filled.Add)" Class="mr-3" /> @(!_editMode ? "Edit Device" : "Create Device")
        </MudText>
    </TitleContent>

    <DialogContent>
        <MudTextField T="string"
                      Label="Device Name"
                      Class="pa-2"
                      Variant="Variant.Outlined"
                      Required="true"
                      RequiredError="A name needs to be specified."
                      Immediate="true"
                      @bind-Value="@_deviceName" />

        <MudStack Row="true">
            <MudTextField T="string"
                          Label="IP Address"
                          Class="pa-2"
                          Variant="Variant.Outlined"
                          Mask="@_ipv4Mask"
                          HelperText="@_ipv4Mask.Mask"
                          FullWidth="true" T="string"
                          Required="true"
                          RequiredError="A IP Address needs to be specified."
                          Immediate="true"
                          @bind-Value="@_ipAddress" />

            <MudNumericField T="int"
                             Label="Port"
                             Class="pa-2"
                             Variant="Variant.Outlined"
                             Required="true"
                             RequiredError="A port needs to be specified."
                             @bind-Value="@_port" />
        </MudStack>

        @* TODO: Add Auto Connect*@


        <MudSelect T="ConnectionType"
                   Label="Connection Type"
                   Class="pa-2"
                   Variant="Variant.Outlined"
                   FullWidth="true"
                   @bind-Value="_connectionType">
            <MudSelectItem T="ConnectionType" Value="ConnectionType.TcpUdp">Udp + Tcp</MudSelectItem>
            <MudSelectItem T="ConnectionType" Value="ConnectionType.TcpOnly">Tcp Only</MudSelectItem>

        </MudSelect>

    </DialogContent>


    <DialogActions>

        <MudButton Class="px-10"
                   Size="Size.Medium"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.Add"
                   OnClick="async () => await SaveDeviceAsync(_deviceName, _ipAddress, _port, _selectedDevice)">Save</MudButton>

        <MudButton Class="px-10"
                   Size="Size.Medium"
                   Variant="Variant.Filled"
                   Color="Color.Secondary"
                   StartIcon="@(_editMode ? Icons.Filled.Edit : Icons.Filled.Add)"
                   OnClick="CloseDialog">Cancel</MudButton>
    </DialogActions>
</MudDialog>







@code {


    private bool _selectEffectDialogVisible;
    private bool _editMode;

    private string _deviceName = default!;
    private string _ipAddress = default!;
    private int _port = default!;
    private ConnectionType _connectionType;
    private Device? _selectedDevice;

    private IMask _ipv4Mask = RegexMask.IPv4();

    /// <summary>
    /// The devices we have in the application.
    /// </summary>
    public List<Device> Devices { get; set; } = new List<Device>();



    /// ---------- Dialog ------------

    /// <summary>
    /// Opens the add new animation dialog.
    /// </summary>
    protected virtual void OpenCreateDialog()
    {
        _logger.LogDebug($"Opening the add new device dialog.");

        // Make sure that the dialog is in edit mode.
        _editMode = true;
        StateHasChanged();

        // Showing the dialog.
        _selectEffectDialogVisible = true;
    }

    /// <summary>
    /// Opens the dialog in a edit mode.
    /// </summary>
    /// <param name="device"></param>
    protected virtual void OpenEditDialog(Device device)
    {
        _logger.LogDebug($"Opening edit device dialog for {device.Id}");

        // Setting the fields in the dialog.
        _selectedDevice = device;
        _deviceName = device.Name;
        _ipAddress = device.EndPoint.Address.ToString();
        _port = device.EndPoint.Port;
        _connectionType = device.ConnectionType;

        // Make sure that the dialog is in edit mode.
        _editMode = true;
        StateHasChanged();

        // Showing the dialog.
        _selectEffectDialogVisible = true;
    }


    /// <summary>
    /// Closes the add new animation dialog.
    /// </summary>
    protected virtual void CloseDialog()
    {
        _logger.LogDebug($"Closing the add new device dialog.");

        // Closing the dialog.
        _selectEffectDialogVisible = false;
    }


    /// <summary>
    /// Clears and resets the fields in the Add new Animation Dialog.
    /// </summary>
    protected virtual void ClearDialog()
    {
        _logger.LogDebug($"Clearing the add new device dialog.");

        // Resetting the fields in the dialog.
        _selectedDevice = null;
        _deviceName = string.Empty;
        _ipAddress = String.Empty;
        _port = 0;
        _connectionType = ConnectionType.TcpUdp;
    }

    /// <summary>
    /// Getting the options for the dialog.
    /// </summary>
    /// <returns>The dialog options.</returns>
    private DialogOptions GetDialogOptions()
    {
        return new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                FullWidth = true
            };
    }


    // --------------- Page -----------------


    /// <inheritdoc />
    protected override async Task OnParametersSetAsync()
    {
        _logger.LogDebug("Opening the devices page. Loading parameters.");

        Devices = new List<Device>(await _deviceManager.GetDevicesAsync());

        await base.OnParametersSetAsync();
    }


    // --------------- Functionality ---------------

    protected virtual async Task ConnectToDeviceAsync(Device device)
    {
        _logger.LogInformation($"Connecting to device {device.Id}.");

        try
        {
            _snackbar.AddInfo($"Starting connection with {device.Name}");

            // Connect to the device.
            await _deviceService.ConnectToDeviceAsync(device);

            // Informing the user.
            StateHasChanged();
            _snackbar.AddSuccess($"Connected to device {device.Name}!");
            _logger.LogInformation($"Connected to device {device.Id}.");

        }
        catch (InvalidOperationException invalidOperationException)
        {
            // When we are trying to connect to a device that is already connected.
            _snackbar.AddError($"Already connected to this device.");
            _logger.LogError(invalidOperationException, $"Already connected to device {device.Id}.");
        }
        catch (NotImplementedException notImplementedException)
        {
            // Connection type is not implemented.

            _snackbar.AddError($"The connection type we selected has not been implemented.");
            _logger.LogError(notImplementedException, $"We have not implemented the selected connection type.");

        }
        catch (DeviceConnectionException connectionException)
        {
            // Handle connection errors.
            _snackbar.AddError($"There was a problem with the connection see logs for details.");
            _logger.LogError(connectionException, $"Connection problems see exception.");
        }

    }


    protected virtual async Task DisconnectFromDeviceAsync(Device device)
    {
        _logger.LogInformation($"Disconnecting to device {device.Name}.");


        try
        {
            _snackbar.AddInfo($"Disconnecting from {device.Name}");

            // Connect to the device.
            await _deviceService.DisconnectFromDeviceAsync(device);

            StateHasChanged();

            // Inform the user and log.
            _snackbar.AddSuccess($"Disconnected from {device.Name}.");
            _logger.LogInformation($"Disconnected from device {device.Name}.");

        }
        catch (InvalidOperationException invalidOperationException)
        {
            // When we are trying to connect to a device that is already connected.
            _snackbar.AddError($"The device is not connected.");
            _logger.LogError(invalidOperationException, $"The device {device.Id} is not connected.");
        }

    }



    /// <summary>
    /// Saves the device to the application.
    /// </summary>
    /// <param name="name">The name of the device,</param>
    /// <param name="ipAddress">The Ip Address of the device.</param>
    /// <param name="port">The port of the device.</param>
    /// <param name="device">The device that we are editing. <c>null</c> when we are creating a device.</param>
    protected virtual async Task SaveDeviceAsync(string name, string ipAddress, int port, Device? device)
    {
        _logger.LogDebug($"Saving device {name}");

        try
        {
            // Checking and getting the endpoint.
            IPAddress address = IPAddress.Parse(_ipAddress);
            IPEndPoint endpoint = new IPEndPoint(address, port);

            // Checking if we need to edit a existing one or create a new one.
            if (_selectedDevice != null)
            {
                // Making sure that we have a name.
                if (String.IsNullOrWhiteSpace(name))
                    throw new ArgumentNullException(nameof(name), "Name is empty or null");

                // Setting then name and endpoints.
                device!.Name = name;
                device.EndPoint = endpoint;
            }
            else
            {
                // Creating new device. | Note that the factory has its own exception validation.
                device = _deviceFactory.CreateDevice(name, endpoint);
            }

            // Setting the connection type.
            device.ConnectionType = _connectionType;

            // Saving the device.
            _logger.LogDebug("Validated device input saving the device.");
            await _deviceManager.SaveDeviceAsync(device);

    // Resetting the dialog.
            ClearDialog();
            CloseDialog();

            // Refreshing and informing the user if the action.
            StateHasChanged();
            _snackbar.AddSuccess($"Device {device.Name} saved!");
            _logger.LogInformation($"Device {device.Id}, has been saved. ");
        }
        catch (ArgumentNullException argumentNullException)
        {
            // Handle no name.

            _snackbar.AddError("The name was null or invalid.");
            _logger.LogError(argumentNullException, "The name was null or empty.");
        }
        catch (FormatException formatException)
        {
            // Handle invalid IP Address.

            _snackbar.AddError("The IP Address was not valid.");
            _logger.LogError(formatException, "The IP Address was invalid.");

        }
        catch (ArgumentOutOfRangeException argumentOutOfRangeException)
        {
            // Handle invalid Port.

            _snackbar.AddError($"The port is out of range.");
            _logger.LogError(argumentOutOfRangeException, "The IP Address was invalid.");

        }
        catch (DbUpdateException dbUpdateException)
        {
            // Handle unable to save.

            _snackbar.AddError($"Unable to save device to the database.");
            _logger.LogError(dbUpdateException, "Unable to save the device to the database.");
        }
    }



}