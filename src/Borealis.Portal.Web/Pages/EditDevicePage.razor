@page "/Devices/Edit/{DeviceId:guid}"

@using Borealis.Portal.Domain.Devices
@using Borealis.Portal.Web.Components
@using Microsoft.AspNetCore.Components
@using MudBlazor
@using Borealis.Domain.Devices
@using Borealis.Portal.Web.Extensions
@using System.Globalization


@* ReSharper disable InconsistentNaming | This is because i want to threat them as fields. I know this is just a autistic thing.*@
@inject ILogger<DevicesPage> _logger
@inject IDeviceManager _deviceManager
@inject IDeviceService _deviceService
@inject IDeviceFactory _deviceFactory
@inject ISnackbar _snackbar
@* ReSharper restore InconsistentNaming *@




<MudStack Class="pa-4" Spacing="20">


    <MudPaper Elevation="25">
        <MudToolBar>
            <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" Class="mr-5" />
            <MudIconButton Icon="@Icons.Material.Outlined.Save" OnClick="OnSaveAsync"  />
            <MudIconButton Icon="@Icons.Material.Outlined.Check" Color="@(JsonValid ? Color.Success : Color.Error)" OnClick="OnValidateAsync" />
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Outlined.Upload"  Color="@(Connected ? Color.Success : Color.Dark)" OnClick="OnUploadAsync"/>
        </MudToolBar>
    </MudPaper>
    
    

    <MudPaper Elevation="25">

        <CodeEditor Value="@Json" ValueChanged="UpdateJson" Language="@CodeEditorLanguages.Json" />

    </MudPaper>


</MudStack>

@code {

	public bool Connected => _deviceService.IsDeviceConnected(Device);

	/// <summary>
	/// The JSON device page.
	/// </summary>
	public string Json { get; set; }

	/// <summary>
	/// Json is valid or not.
	/// </summary>
	public bool JsonValid { get; set; }


    [Parameter]
	public Guid DeviceId { get; set; }

	public Device Device { get; set; }



	/// <inheritdoc />
	protected override async Task OnParametersSetAsync()
	{
		Device = await _deviceManager.GetDeviceById(DeviceId);

        // Set Configuration
		Json = Device.ConfigurationJson;

		await base.OnParametersSetAsync();
	}


	protected virtual async Task OnSaveAsync()
	{
		_logger.LogInformation($"Saving device configuration {Device.Name}.");

		if (!await ValidateAsync()) return;

		_deviceFactory.ChangeDeviceConfiguration(Device, Json);
		await _deviceManager.SaveDeviceAsync(Device);

		_logger.LogInformation($"Saved device configuration.");
		_snackbar.AddSuccess($"Device configuration saved.");
	}


	protected virtual async Task OnUploadAsync()
	{
		_logger.LogInformation($"Uploading device configuration {Device.Name}.");

		if (!_deviceService.IsDeviceConnected(Device))
		{
			_logger.LogError($"Cannot upload device configuration disconnected.");
			_snackbar.AddError($"Not connected to device!");
		}

		if (!await ValidateAsync())
			return;

		_deviceFactory.ChangeDeviceConfiguration(Device, Json);
		await _deviceManager.SaveDeviceAsync(Device);
		await _deviceService.UploadDeviceConfigurationAsync(Device);

		_logger.LogInformation($"Device configuration uploaded.");
		_snackbar.AddSuccess($"Device configuration uploaded.");
	}


	protected virtual async Task OnValidateAsync()
	{
		_logger.LogInformation($"Validating device configuration {Device.Name}.");

		if (await ValidateAsync())
		{
			_logger.LogInformation($"Configuration is valid.");
			_snackbar.AddSuccess($"Configuration is valid!");
		}
		;
	}


	protected virtual void UpdateJson(string json)
	{
		if (String.Compare(Json, json, CultureInfo.CurrentCulture, CompareOptions.IgnoreCase | CompareOptions.IgnoreSymbols) == 0) return;
		Json = json;
		JsonValid = false;
	}



	protected virtual Task<bool> ValidateAsync()
	{
		
		bool result = _deviceFactory.ValidateConfigurationJson(Json).Success;

			if (result) return Task.FromResult(true);

			_logger.LogError($"The device configuration is not valid.");
			_snackbar.AddError($"Configuration not valid.");
			return Task.FromResult(false);
	}


	


}