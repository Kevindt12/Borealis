@page "/Effects"

@using Borealis.Domain.Effects
@using Borealis.Portal.Domain.Effects
@using Borealis.Portal.Web.Components;
@using System.Reflection.Metadata
@using BlazorMonaco
@using Borealis.Domain.Devices
@using Borealis.Portal.Web.Extensions



@*
    TODO: Dialog does not close when effect has been created
    TODO: No feedback to the user that we created a effect and that its saved.
    TODO: Edit margins because the ubttons are too far to the sids.


*@

@* ReSharper disable InconsistentNaming | This is because i want to threat them as fields. I know this is just a autistic thing.*@
@inject ILogger<DevicesPage> _logger

@inject IEffectManager _effectManager
@inject IEffectFactory _EffectFactory

@inject ISnackbar _snackbar
@* ReSharper restore InconsistentNaming *@

<PageTitle>Effects</PageTitle>

@* The action buttons. *@
<MudStack Class="py-4" AlignItems="AlignItems.Start" Justify="Justify.SpaceBetween" Row="true">

    @* The add button.*@
    <MudButton Class="pa-2"
               Size="Size.Small"
               Variant="Variant.Filled"
               StartIcon="@Icons.Material.Filled.Add"
               Color="Color.Primary"
               OnClick="OnAddEffect">Add</MudButton>

    @* The Save button, *@
    <MudButton Class="pa-2"
               Size="Size.Small"
               Variant="Variant.Filled"
               StartIcon="@Icons.Material.Filled.Save"
               Disabled="@(!Effects.Any())"
               Color="Color.Secondary"
               OnClick="OnSaveAsync">Save</MudButton>

</MudStack>


@* The tabs with all the effects editor. *@
<MudTabs Class="mt-8" PanelClass="pa-6"
         Outlined="true"
         Border="true" AlwaysShowScrollButtons="false"
         Position="MudBlazor.Position.Left"
         @bind-ActivePanelIndex="SelectedEffectIndex">

    @foreach (Effect effect in Effects)
    {
        <MudTabPanel Class="pa-2" Text="@effect.Name">
            <MudStack>


                @* Javascript editor *@

                <MudPaper MinHeight="500" MaxHeight="800" Elevation="2">
                    <MudText Class="px-4 py-2" Typo="@Typo.h5" Align="@Align.Left">Editor</MudText>
                    <MudDivider DividerType="@DividerType.Middle" FlexItem="@true" />
                    <CodeEditor Id="@effect.Id" @bind-Value="@effect.Javascript" Width="1000" />
                </MudPaper>

                <MudDivider DividerType="@DividerType.Inset" />

                @* Javascript Parameters *@
                <MudPaper Class="px-4 py-2" Elevation="2">
                    <MudText Class="px-4 py-2" Typo="@Typo.h5" Align="@Align.Left">Parameters</MudText>

                    <MudStack Spacing="1">
                        @* All rows. *@
                        @for (int i = 0; i < effect.EffectParameters.Count; i++)
                        {
                            /* Making a copy because of closures. */
                            int i1 = i;

                            <EffectParameterRow Class="pa-1" @bind-EffectParameter="@effect.EffectParameters[i1]" OnRemoveClicked="@(() => OnEffectParameterRemoved(effect, effect.EffectParameters[i1]))" />
                        }

                        @* Empty new row. *@
                        <EffectParameterRow Class="pa-1" DisableRemoveButton="@true" EffectParameter="@EffectParameter.New(EffectParameterType.Text)" EffectParameterChanged="@((p) => { OnEffectParameterAdded(p, effect);  })" />
                    </MudStack>

                </MudPaper>

                <MudDivider DividerType="@DividerType.Inset"/>

                <MudPaper Class="px-4 py-2" Outlined="true">
                    <MudText Class="px-4 py-2" Typo="@Typo.h5" Align="@Align.Left" >Testing</MudText>

                    <MudStack Justify="Justify.SpaceAround" >


                        <LedstripEmulator ColorSpectrum="ColorSpectrum.Rgb" Effect="effect" />

                    </MudStack>
                </MudPaper>


            </MudStack>
        </MudTabPanel>
    }
</MudTabs>





@* ---------- Select Effect Dialog ----------- *@
@if (true)
{


    <MudDialog @bind-IsVisible="_newEffectNameDialogVisible" Options="GetDialogOptions()">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3" /> Add Effect
            </MudText>
        </TitleContent>
        <DialogContent>
            @* TODO: Add validation to animation page.*@
            <MudTextField T="string" Class="pa-4" Variant="Variant.Outlined" Label="Name" @bind-Value="@_newEffectName" />
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => CreateEffectAsync(_newEffectName)" Class="px-10">Create</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CloseDialog" Class="px-10">Close</MudButton>
        </DialogActions>
    </MudDialog>

}





@code {

    private bool _newEffectNameDialogVisible;
    private string _newEffectName = default!;


    public int SelectedEffectIndex { get; set; }

    public List<Effect> Effects { get; set; } = new List<Effect>();




    /// <inheritdoc />
    protected override async Task OnParametersSetAsync()
    {
        Effects = new List<Effect>(await _effectManager.GetEffectsAsync());

        // Make sure we select the first effect.

        await base.OnParametersSetAsync();
    }


    /// ---------- Dialog ------------

    /// <summary>
    /// Opens the add new animation dialog.
    /// </summary>
    protected virtual void OpenDialog()
    {
        _newEffectNameDialogVisible = true;
    }


    /// <summary>
    /// Closes the add new animation dialog.
    /// </summary>
    protected virtual void CloseDialog()
    {
        _newEffectNameDialogVisible = false;
    }


    /// <summary>
    /// Clears and resets the fields in the Add new Animation Dialog.
    /// </summary>
    protected virtual void ClearDialog()
    {
        _newEffectName = string.Empty;
    }


    private DialogOptions GetDialogOptions()
    {
        return new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                FullWidth = true
            };
    }



    // ------------- Page -------------


    protected virtual void OnEffectParameterAdded(EffectParameter parameter, Effect effect)
    {
        _logger.LogInformation($"Adding effect parameter on {effect.Name}.");

        effect.EffectParameters.Add(parameter);
        StateHasChanged();
    }


    protected virtual void OnAddEffect()
    {
        OpenDialog();
    }


    protected virtual async Task OnSaveAsync()
    {
        // Selected page effect.
        Effect effect = Effects[SelectedEffectIndex];

        _logger.LogInformation($"Saving effect {effect.Name}.");
        await _effectManager.SaveEffectAsync(effect);

        _logger.LogInformation($"Effect {effect.Name} has been saved.");
        _snackbar.AddSuccess($"Saved effect!");
    }


    protected virtual void OnEffectParameterRemoved(Effect effect, EffectParameter parameter)
    {
        effect.EffectParameters.Remove(parameter);
        StateHasChanged();
    }

    // -------- Functionality ----------



    protected virtual async Task CreateEffectAsync(string effectName)
    {
        _logger.LogInformation($"Creating effect with name {effectName}.");

        // Creating the effect via a factory because of the template javascript..
        Effect effect = _EffectFactory.CreateEffect(effectName);

        // Saving the effect and adding it to the list.
        await _effectManager.SaveEffectAsync(effect);
        Effects.Add(effect);

        _logger.LogInformation($"Created effect {effect.Name}.");
        _snackbar.AddSuccess($"Created effect!");

        // Update the ui.
        CloseDialog();
        ClearDialog();
        StateHasChanged();

    }






}